VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "aModules"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'* Class      : aModules
'* Author     : Anastasiou Alex
'* Contacts   : AnastasiouAlex@gmail.com
'*
'* BLOG       : https://alexofrhodes.github.io/
'* GITHUB     : https://github.com/alexofrhodes/
'* YOUTUBE    : https://www.youtube.com/channel/UC5QH3fn1zjx0aUjRER_rOjg
'* VK         : https://vk.com/video/playlist/735281600_1
'*
'* Modified   : Date and Time       Author              Description
'* Created    : 29-06-2023 13:46    Alex
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Option Explicit
Private ModuleCollection As Collection
Private oWorkbook As Workbook

Function Init(TargetWorkbook As Workbook) As aModules
    Set oWorkbook = TargetWorkbook
    Dim Module As VBComponent
    Dim coll As New Collection
    Dim am As aModule
    For Each Module In oWorkbook.VBProject.VBComponents
        Set am = New aModule
        coll.Add am.Init(Module), Module.Name
    Next
    Set ModuleCollection = coll
    Set Init = Me
End Function

Sub PrintTodoList()
    Dim am As aModule
    For Each am In Items
        am.PrintTodoList
    Next
End Sub

Sub Export(TargetPath As String, CreateSubFolders As Boolean)
    Dim ClassFolder As String:          ClassFolder = TargetPath
    Dim FormFolder As String:           FormFolder = TargetPath
    Dim NormalModuleFolder As String:   NormalModuleFolder = TargetPath
    Dim DocumentFolder As String:       DocumentFolder = TargetPath

    If CreateSubFolders Then
        FormFolder = TargetPath & "Userforms"
        NormalModuleFolder = TargetPath & "Modules"
        DocumentFolder = TargetPath & "Documents"
        ClassFolder = TargetPath & "Classes"
    
        FoldersCreate FormFolder
        FoldersCreate NormalModuleFolder
        FoldersCreate ClassFolder
        FoldersCreate DocumentFolder
    End If
    
    Dim am As aModule
    For Each am In Me.Classes:          am.Export ClassFolder:          Next am
    For Each am In Me.Userforms:        am.Export FormFolder:           Next am
    For Each am In Me.NormalModules:    am.Export NormalModuleFolder:   Next am
    For Each am In Me.Documents:        am.Export DocumentFolder:       Next am
End Sub

Sub InjectOptionExplicit()
    Dim am As aModule
    For Each am In Items
        If Not am.Contains("Option Explicit", False, True, False) Then am.item.CodeModule.InsertLines 1, "Option Explicit"
    Next
End Sub



Public Sub Indent()
    Dim Module As aModule
    For Each Module In Modules.Items
        Module.Indent
    Next
End Sub
Sub RemoveEmptyLinesButLeaveOne()
    Dim Module As aModule
    For Each Module In Items
        Module.RemoveEmptyLinesButLeaveOne
    Next
End Sub
Sub UpdateProcedures()
    Dim Procedure As aProcedure
    Dim Module As aModule
    For Each Module In Items
        If Module.TypeToLong = vbext_ct_StdModule Then
            For Each Procedure In Module.Procedures
                If UCase(CStr(Procedure)) <> UCase("UpdateAllProcedures") Then
                    Procedure.Update
                End If
            Next
        End If
    Next
End Sub

Function Items() As Collection
    Set Items = ModuleCollection
End Function

Public Function item(IndexOrName As Variant) As aModule
    Set item = Items.item(IndexOrName)
End Function

Function NormalModules() As Collection
    Dim coll As New Collection
    Dim element As aModule
    For Each element In ModuleCollection
        If element.TypeToLong = vbext_ct_StdModule Then
            coll.Add element, element.Name
        End If
    Next
    Set NormalModules = coll
End Function

Function Userforms() As Collection
    Dim coll    As New Collection
    Dim element As aModule
    For Each element In ModuleCollection
        If element.TypeToLong = vbext_ct_MSForm Then
            coll.Add element, element.Name
        End If
    Next
    Set Userforms = coll
End Function

Function Classes() As Collection
    Dim coll    As New Collection
    Dim element As aModule
    For Each element In ModuleCollection
        If element.TypeToLong = vbext_ct_ClassModule Then
'            Debug.Print element.Name
            coll.Add element, element.Name
        End If
    Next
    Set Classes = coll
End Function

Function Documents() As Collection
    Dim coll    As New Collection
    Dim element As aModule
    For Each element In ModuleCollection
        If element.TypeToLong = vbext_ct_Document Then
            coll.Add element, element.Name
        End If
    Next
    Set Documents = coll
End Function

Public Function Exists(TargetName As String) As Boolean
    Dim Module As VBComponent
    On Error Resume Next
    Set Module = oWorkbook.VBProject.VBComponents(TargetName)
    On Error GoTo 0
    Exists = Not Module Is Nothing
End Function

Function AddOrSet( _
                    TargetName As String, _
                    ModuleType As VBIDE.vbext_ComponentType) As aModule

    Dim Module As VBComponent
    On Error Resume Next
    Set Module = oWorkbook.VBProject.VBComponents(TargetName)
    On Error GoTo 0
    If Module Is Nothing Then
        Set Module = oWorkbook.VBProject.VBComponents.Add(ModuleType)
        Module.Name = TargetName
    End If
    Dim am As New aModule
    am.Init Module
    Set AddOrSet = am
End Function

Sub ImportPaths(ReplaceExisting As Boolean, ParamArray Paths() As Variant)
    If LBound(Paths) = -1 Then Exit Sub
    
    Dim Extension          As String
    Dim TargetName         As String
    Dim element
    
    Dim PASS As Boolean
    For Each element In Paths
        Select Case True
        Case element Like "*.cls", "*.frm", "*.bas", "*.bas"
        Case Else: Exit Sub
        End Select
    Next
    For Each element In Paths
        TargetName = DataFilePartName(CStr(element), False)
        Extension = DataFilePartExtension(CStr(element))
        If Exists(TargetName) Then
            If ReplaceExisting Then
                aModule.Init(oWorkbook.VBProject.VBComponents(TargetName)).Delete
                oWorkbook.VBProject.VBComponents.Import CStr(element)
            End If
        Else
            oWorkbook.VBProject.VBComponents.Import CStr(element)
        End If
    Next element

    'https://github.com/rfl808/Notify
    Toast , "Import successful"
End Sub

Sub ImportPicker(ReplaceExisting As Boolean)
    Dim SelectedModules: SelectedModules = DataFilePicker(Array("bas", "frm", "cls"), True)
    If Not ArrayAllocated(SelectedModules) Then Exit Sub
    Dim basePath           As String:   basePath = DataFilePartFolder(SelectedModules(1), True)
'    Dim SourceWorkbook     As Workbook
'    Dim SourceWorkbookName As String:   SourceWorkbookName = Dir(basePath & "*.xl*")
'    Dim wasOpen            As Boolean
'
'    If SourceWorkbookName <> "" Then: wasOpen = WorkbookExists(SourceWorkbookName)

    Dim Extension          As String
    Dim TargetName         As String
    Dim element
    For Each element In SelectedModules
        TargetName = DataFilePartName(CStr(element), False)
        Extension = DataFilePartExtension(CStr(element))
'        If UCase(Extension) <> UCase("doccls") Then
        If Exists(TargetName) Then
            If ReplaceExisting Then
                aModule.Init(oWorkbook.VBProject.VBComponents(TargetName)).Delete
                oWorkbook.VBProject.VBComponents.Import CStr(element)
            End If
        Else
            oWorkbook.VBProject.VBComponents.Import CStr(element)
        End If

'        ElseIf UCase(Extension) = UCase("doccls") And SourceWorkbookName <> "" Then
'            If WorksheetExists(TargetName, oWorkbook) Then
'                If ReplaceExisting Then
''                    TargetWorkbook.Worksheets.Copy
'                    TargetWorkbook.Worksheets(TargetName).Delete
'                Else
'                    GoTo NextElement
'                End If
'
'                If wasOpen = False Then
'                    Application.EnableEvents = False
'                    Set SourceWorkbook = Workbooks.Open(basePath & SourceWorkbookName)
'                Else
'                    Set SourceWorkbook = Workbooks(SourceWorkbookName)
'                End If
'                SourceWorkbook.SHEETS(TargetName).Copy Before:=TargetWorkbook.SHEETS(1)
'                Application.EnableEvents = True
'            End If
'        End If
NextElement:
    Next element

'    If wasOpen = False And WorkbookExists(SourceWorkbookName) Then SourceWorkbook.Close False
    'https://github.com/rfl808/Notify
    Toast , "Import successful"
End Sub

Sub ListProcedures()
    Dim Module As VBComponent
    For Each Module In oWorkbook.VBProject.VBComponents
        If Module.Type <> vbext_ct_ClassModule And Module.Type <> vbext_ct_Document Then
            If Module.CodeModule.CountOfLines > 0 Then
                aModule.Init(Module).ListProcedures
            End If
        End If
    Next
End Sub

Sub SideBySide(ParamArray TwoModuleNamesOrOneFormName() As Variant)
 
    Dim Module1 As VBComponent
    Dim Module2 As VBComponent
    Set Module1 = oWorkbook.VBProject.VBComponents(TwoModuleNamesOrOneFormName(0))
    If UBound(TwoModuleNamesOrOneFormName) > 0 Then Set Module2 = oWorkbook.VBProject.VBComponents(TwoModuleNamesOrOneFormName(1))
    With Module1.CodeModule.CodePane.Window
        .Width = 800
        .Left = 1
        .Top = 1
        .Height = 932
        .Visible = True
        .WindowState = vbext_ws_Normal
        .SetFocus
    End With
    If Not Module2 Is Nothing Then
        With Module2.CodeModule.CodePane.Window
            .Width = 800
            .Left = 800
            .Top = 1
            .Height = 932
            .Visible = True
            .WindowState = vbext_ws_Normal
            .SetFocus
        End With
    ElseIf Module1.Type = vbext_ct_MSForm Then
        With Module1.DesignerWindow
            .Width = 800
            .Left = 800
            .Top = 1
            .Height = 932
            .Visible = True
            .WindowState = vbext_ws_Normal
            Module1.DesignerWindow.SetFocus
        End With
        Exit Sub

    End If
End Sub
'
'Sub CaseProperModulesOfWorkbook(Optional TargetWorkbook As Workbook)
'    Dim Module As VBComponent
'    For Each Module In TargetWorkbook.VBProject.VBComponents
'        If Module.Name <> "ThisWorkbook" Then
'            Module.Name = UCase(Left(Module.Name, 1)) & Mid(Module.Name, 2)
'        End If
'    Next
'End Sub

Public Sub Refresh()
    If oWorkbook.Name <> ThisWorkbook.Name Then
        ExportModules
        ImportModules
    Else
        Toast "Can't touch this"
    End If
End Sub

Sub ExportProcedures(TargetPath As String)
    TargetPath = Replace(TargetPath & "\", "\\", "\")
    Dim ProcedurePath As String
    Dim am            As aModule
    Dim AP            As aProcedure
    Dim coll          As New Collection
    Dim ModulePath    As String
    For Each am In NormalModules
    'Userforms and Classes should be exported as they are
        ModulePath = TargetPath & "Procedures\" & am.Name & "\"
        FoldersCreate ModulePath
        am.ExportProcedures ModulePath
    Next
End Sub

Private Sub ExportModules()
    Dim bExport      As Boolean
    Dim szExportPath As String
    Dim szFileName   As String
    Dim cmpComponent As VBIDE.VBComponent
    If FolderWithVBAProjectFiles = "Error" Then
        MsgBox "Export Folder not exist"
        Exit Sub
    End If
    On Error Resume Next
    Kill FolderWithVBAProjectFiles & "\*.*"
    On Error GoTo 0
    szExportPath = FolderWithVBAProjectFiles & "\"
    For Each cmpComponent In oWorkbook.VBProject.VBComponents
        bExport = True
        szFileName = cmpComponent.Name
        Select Case cmpComponent.Type
        Case vbext_ct_ClassModule
            szFileName = szFileName & ".cls"
        Case vbext_ct_MSForm
            szFileName = szFileName & ".frm"
        Case vbext_ct_StdModule
            szFileName = szFileName & ".bas"
        Case vbext_ct_Document
            bExport = False
        End Select
        If bExport Then
            cmpComponent.Export szExportPath & szFileName
        End If
    Next cmpComponent
End Sub

Private Sub ImportModules()
    Dim objFSO        As scripting.FileSystemObject
    Dim objFile       As scripting.File
    Dim szImportPath  As String
    Dim szFileName    As String
    Dim cmpComponents As VBIDE.VBComponents
    If oWorkbook.Name = ThisWorkbook.Name Then
        MsgBox "Select another destination workbook" & _
        "Not possible to import in this workbook "
        Exit Sub
    End If
    If FolderWithVBAProjectFiles = "Error" Then
        MsgBox "Import Folder not exist"
        Exit Sub
    End If
    szImportPath = FolderWithVBAProjectFiles & "\"
    Set objFSO = New scripting.FileSystemObject
    If objFSO.getFolder(szImportPath).Files.count = 0 Then
        MsgBox "There are no files to import"
        Exit Sub
    End If
    Call DeleteVBAModulesAndUserForms
    Set cmpComponents = oWorkbook.VBProject.VBComponents
    For Each objFile In objFSO.getFolder(szImportPath).Files
        If (objFSO.GetExtensionName(objFile.Name) = "cls") Or _
            (objFSO.GetExtensionName(objFile.Name) = "frm") Or _
            (objFSO.GetExtensionName(objFile.Name) = "bas") Then
            cmpComponents.Import objFile.Path
        End If
    Next objFile
End Sub

Private Function FolderWithVBAProjectFiles() As String
    Dim WshShell    As Object
    Dim fso         As Object
    Dim SpecialPath As String
    Set WshShell = CreateObject("WScript.Shell")
    Set fso = CreateObject("scripting.filesystemobject")
    SpecialPath = WshShell.SpecialFolders("MyDocuments")
    If Right(SpecialPath, 1) <> "\" Then
        SpecialPath = SpecialPath & "\"
    End If
    If fso.FolderExists(SpecialPath & "VBAProjectFiles") = False Then
        On Error Resume Next
        MkDir SpecialPath & "VBAProjectFiles"
        On Error GoTo 0
    End If
    If fso.FolderExists(SpecialPath & "VBAProjectFiles") = True Then
        FolderWithVBAProjectFiles = SpecialPath & "VBAProjectFiles"
    Else
        FolderWithVBAProjectFiles = "Error"
    End If
End Function

Private Sub DeleteVBAModulesAndUserForms()
    Dim vbProj As VBIDE.VBProject
    Dim vbcomp As VBIDE.VBComponent
    Set vbProj = oWorkbook.VBProject
    For Each vbcomp In vbProj.VBComponents
        If vbcomp.Type = vbext_ct_Document Then
        Else
            vbProj.VBComponents.Remove vbcomp
        End If
    Next vbcomp
End Sub

Public Sub CommentsRemove()
    Dim am As aModule
    For Each am In Items
        am.CommentsRemove
    Next
End Sub

Sub RemoveProcedureList()
    Dim am As aModule
    For Each am In Items
        am.FolderDelete "ListOfProcedures"
    Next
End Sub

Function ClassNames()
    Set ClassNames = NamesOf(vbext_ct_ClassModule)
End Function
Function ModuleNames()
    Set ModuleNames = NamesOf(vbext_ct_StdModule)
End Function

Function UserformNames()
    Set UserformNames = NamesOf(vbext_ct_MSForm)
End Function
'Sub CaseProperModulesOfWorkbook()
'    Dim Module As VBComponent
'    For Each Module In oWorkbook.VBProject.VBComponents
'        If Module.Name <> "ThisWorkbook" Then
'            Module.Name = UCase(Left(Module.Name, 1)) & Mid(Module.Name, 2)
'        End If
'    Next
'End Sub


Public Function NamesOf(ModuleType As vbext_ComponentType)
    Dim coll   As New Collection
    Dim Module As VBComponent
    For Each Module In oWorkbook.VBProject.VBComponents
        If Module.Type = ModuleType Then
            coll.Add Module.Name
        End If
    Next
    Set NamesOf = coll
End Function


