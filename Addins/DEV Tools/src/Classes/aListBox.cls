VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "aListBox"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = True
Attribute VB_Exposed = False


'@TODO C:\Users\acer\Dropbox\SOFTWARE\EXCEL\Manfred van den Noort\      '-> listbox_drag_drop_advanced

'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
'* Class      : aListBox
'* Author     : Anastasiou Alex
'* Contacts   : AnastasiouAlex@gmail.com
'*
'* BLOG       : https://alexofrhodes.github.io/
'* GITHUB     : https://github.com/alexofrhodes/
'* YOUTUBE    : https://www.youtube.com/channel/UC5QH3fn1zjx0aUjRER_rOjg
'* VK         : https://vk.com/video/playlist/735281600_1
'*
'* Modified   : Date and Time       Author              Description
'* Created    : 04-05-2023 12:18    Alex
'* Modified   : 21-07-2023 08:28    Alex
'* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

Option Explicit



Public WithEvents Emitter As EventListenerEmitter
Attribute Emitter.VB_VarHelpID = -1

Public WithEvents DoubleClickEvents As MSForms.ListBox
Attribute DoubleClickEvents.VB_VarHelpID = -1

Public WithEvents ExtendedSelectionEvents As MSForms.ListBox
Attribute ExtendedSelectionEvents.VB_VarHelpID = -1
Private ItemsSelected As Variant


Public WithEvents DragSource As MSForms.ListBox
Attribute DragSource.VB_VarHelpID = -1
Public WithEvents DragTarget As MSForms.ListBox
Attribute DragTarget.VB_VarHelpID = -1
Private from_lb_index As Long
Private to_lb_index As Long

Private oListBox As MSForms.ListBox
Private oList
Private oForm As Object
Private previousFilterLength As Long

Private isDoubleClick As Boolean

#If VBA7 Then
    Private Declare PtrSafe Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
    Private Declare PtrSafe Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Integer
#Else
    Private Declare Function GetSystemMetrics Lib "user32" (ByVal nIndex As Long) As Long
    Private Declare Function GetKeyState Lib "user32" (ByVal nVirtKey As Long) As Integer
#End If

Private Type POINTAPI
    X               As Long
    Y               As Long
End Type

#If VBA7 Then
    
    Private Type Msg
        hwnd            As LongPtr
        message         As Long
        wParam          As LongPtr
        lParam          As LongPtr
        time            As Long
        pt              As POINTAPI
    End Type
    
    #If Win64 Then
    Private Declare PtrSafe Function WindowFromPoint Lib "user32" (ByVal POINT As LongPtr) As LongPtr
    #Else
    Private Declare PtrSafe Function WindowFromPoint Lib "user32" (ByVal xPoint As Long, ByVal yPoint As Long) As LongPtr
    #End If
    
    Private Declare PtrSafe Function GetMessage Lib "user32" Alias "GetMessageA" (lpMsg As Msg, ByVal hwnd As LongPtr, ByVal wMsgFilterMin As Long, ByVal wMsgFilterMax As Long) As Long
    Private Declare PtrSafe Function DispatchMessage Lib "user32" Alias "DispatchMessageA" (lpMsg As Msg) As LongPtr
    Private Declare PtrSafe Function TranslateMessage Lib "user32" (lpMsg As Msg) As Long
    Private Declare PtrSafe Function WindowFromAccessibleObject Lib "oleacc" (ByVal pacc As IAccessible, phwnd As LongPtr) As Long
    Private Declare PtrSafe Function IsWindow Lib "user32" (ByVal hwnd As LongPtr) As Long
    Private Declare PtrSafe Sub DragAcceptFiles Lib "shell32.dll" (ByVal hwnd As LongPtr, ByVal fAccept As Long)
    Private Declare PtrSafe Sub DragFinish Lib "shell32.dll" (ByVal HDROP As LongPtr)
    Private Declare PtrSafe Function DragQueryFile Lib "shell32.dll" Alias "DragQueryFileA" (ByVal HDROP As LongPtr, ByVal UINT As Long, ByVal lpStr As String, ByVal ch As Long) As Long
    Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As LongPtr)

#Else
    
    Private Type Msg
        hwnd            As Long
        message         As Long
        wParam          As Long
        lParam          As Long
        time            As Long
        pt              As POINTAPI
    End Type
    
    Private Declare Function WindowFromPoint Lib "user32" (ByVal xPoint As Long, ByVal yPoint As Long) As Long
    Private Declare Function GetMessage Lib "user32" Alias "GetMessageA" (lpMsg As MSG, ByVal hwnd As Long, ByVal wMsgFilterMin As Long, ByVal wMsgFilterMax As Long) As Long
    Private Declare Function DispatchMessage Lib "user32" Alias "DispatchMessageA" (lpMsg As MSG) As Long
    Private Declare Function TranslateMessage Lib "user32" (lpMsg As MSG) As Long
    Private Declare Function WindowFromAccessibleObject Lib "oleacc" (ByVal pacc As IAccessible, phwnd As Long) As Long
    Private Declare Function IsWindow Lib "user32" (ByVal hwnd As Long) As Long
    Private Declare Sub DragAcceptFiles Lib "shell32.dll" (ByVal hwnd As Long, ByVal fAccept As Long)
    Private Declare Sub DragFinish Lib "shell32.dll" (ByVal HDROP As Long)
    Private Declare Function DragQueryFile Lib "shell32.dll" Alias "DragQueryFileA" (ByVal HDROP As Long, ByVal UINT As Long, ByVal lpStr As String, ByVal ch As Long) As Long
    Private Declare Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (Destination As Any, Source As Any, ByVal Length As Long)
#End If


Public Function Init(ByRef TargetListBox As MSForms.ListBox) As aListBox
    Set oListBox = TargetListBox
    Set oForm = oListBox.Parent
    Set Init = Me
    
'    Me.AutofitColumns  '@TODO where to put this? needed for TargetColumn, in case they were not manually set
End Function

Public Function Parent()
    Set Parent = oForm
End Function
Sub RememberList()
    oList = oListBox.List
End Sub







Private Sub Emitter_Click(control As Object)
    If control.Name Like "lblHeader-*" Then
        Dim col As Long
        col = Split(control.Name, "-")(1)
        Me.SortOnColumn col - 1
    End If
End Sub
Private Sub Emitter_Keyup(control As Object, KeyCode As MSForms.ReturnInteger, Shift As Integer)
    If Not ArrayAllocated(oList) Then RememberList
    If control.Name = "txtFilter" Then
        If Len(control.text) = 0 Then
            oListBox.List = oList
        ElseIf Len(control.text) > previousFilterLength Then
            oListBox.List = ArrayFilter2D(oListBox.List, control.text, oForm.Controls("cbxFilter").text)
        ElseIf Len(control.text) < previousFilterLength Then
            oListBox.List = ArrayFilter2D(oList, control.text, oForm.Controls("cbxFilter").text)
        End If
        previousFilterLength = Len(control.text)
    End If
        
    If control.Name = "cbxFilter" Then
        oForm.Controls("txtFilter").text = ""
        previousFilterLength = 0
    End If
End Sub


Public Sub ListenToDragDrop(Optional ToLbx As MSForms.ListBox)
    Set DragSource = oListBox
    If Not ToLbx Is Nothing Then
        Set DragTarget = ToLbx
    Else
        Set DragTarget = oListBox
    End If
    DragTarget.columnCount = DragSource.columnCount
    DragSource.MousePointer = 5
End Sub
Private Sub DragTarget_BeforeDragOver(ByVal Cancel As MSForms.ReturnBoolean, ByVal Data As MSForms.DataObject, ByVal X As Single, ByVal Y As Single, ByVal DragState As MSForms.fmDragState, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    Effect = fmDropEffectMove
    Cancel = True
End Sub
Private Sub DragTarget_BeforeDropOrPaste(ByVal Cancel As MSForms.ReturnBoolean, ByVal Action As MSForms.fmAction, ByVal Data As MSForms.DataObject, ByVal X As Single, ByVal Y As Single, ByVal Effect As MSForms.ReturnEffect, ByVal Shift As Integer)
    With DragTarget
'        Dim to_lb_index As Long
        to_lb_index = Int(Y * 0.85 / .Font.Size)
        If to_lb_index >= .ListCount Then to_lb_index = .ListCount
        Cancel = True
        Effect = fmDropEffectMove
        If DragTarget.ListCount = 0 Then
            .AddItem
        Else
            .AddItem , to_lb_index 'Data.GetText, to_lb_index
        End If
        Dim i As Long
        For i = 0 To DragSource.columnCount - 1
            DragTarget.List(to_lb_index, i) = DragSource.List(DragSource.ListIndex, i)
        Next
        
        If .Name = DragSource.Name And to_lb_index < from_lb_index Then
            .RemoveItem (from_lb_index + 1)
        Else
            DragSource.RemoveItem from_lb_index
        End If
    End With
    
    If DragTarget.multiSelect = fmMultiSelectSingle Then
'        DragTarget.ListIndex = -1
        ClearSelection
    Else
        ClearSelection
    End If
'    oForm.Repaint
End Sub


Private Sub DragSource_MouseMove(ByVal button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    Dim obj As DataObject
    Dim drageff As Long
    If button = 1 Then
        Set obj = New DataObject
'        obj.SetText DragSource.text
        from_lb_index = DragSource.ListIndex
        drageff = obj.StartDrag
        Set obj = Nothing
    End If
End Sub


Public Sub ListenToExtendedSelection()
    Set ExtendedSelectionEvents = oListBox
End Sub
Private Sub ExtendedSelectionEvents_Change()
'author: Petr Radimersky
Dim i As Long
If CBool(GetKeyState(&HA0) And &HFF80) Then
    With ExtendedSelectionEvents
        For i = 0 To .ListCount - 1
            If ItemsSelected(i) = False And .Selected(i) = True Then
                ItemsSelected(i) = True
            End If
        Next i
    End With
End If
End Sub
Private Sub ExtendedSelectionEvents_MouseDown(ByVal button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
Dim i As Long
If CBool(GetKeyState(&HA0) And &HFF80) Then
    With ExtendedSelectionEvents
        ReDim ItemsSelected(0 To .ListCount - 1) As Boolean
        For i = 0 To .ListCount - 1
            ItemsSelected(i) = .Selected(i)
        Next i
    End With
End If
End Sub
Private Sub ExtendedSelectionEvents_MouseUp(ByVal button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
Dim i As Long
If CBool(GetKeyState(&HA0) And &HFF80) Then
    With ExtendedSelectionEvents
        For i = 0 To .ListCount - 1
            .Selected(i) = ItemsSelected(i)
        Next i
    End With
End If
End Sub



Public Sub ListenToDoubleClick()
    Set DoubleClickEvents = oListBox
End Sub

Private Sub DoubleClickEvents_DblClick(ByVal Cancel As MSForms.ReturnBoolean)
    isDoubleClick = True
End Sub

Public Sub DoubleClickEvents_MouseUp(ByVal button As Integer, ByVal Shift As Integer, ByVal X As Single, ByVal Y As Single)
    If Not isDoubleClick Then Exit Sub
    MsgBox oListBox.List(oListBox.ListIndex, targetColumn(X, Y) - 1)
    isDoubleClick = False
End Sub

Public Function targetColumn(X, Y)
        ' Calculate the column index based on the X-coordinate
        Dim ColumnIndex As Long
        Dim columnWidth As Long
        Dim totalWidth As Long
        Dim totalColumns As Long
        
        totalColumns = oListBox.columnCount
        
        ' Calculate the total width of all columns
        For ColumnIndex = 1 To totalColumns
            columnWidth = Replace(Split(oListBox.columnWidths, ";")(ColumnIndex - 1), " pt", "")
            totalWidth = totalWidth + columnWidth
        Next ColumnIndex
        
        ' Calculate the approximate column index based on the X-coordinate
        Dim clickedX As Long
        clickedX = X
        
        If clickedX > 0 Then
            Dim cumulativeWidth As Long
            Dim lastColumnIndex As Long
            
            For ColumnIndex = 1 To totalColumns
                columnWidth = Replace(Split(oListBox.columnWidths, ";")(ColumnIndex - 1), " pt", "")
                cumulativeWidth = cumulativeWidth + columnWidth
                
                If clickedX < cumulativeWidth Then
                    ' The mouse click is within this column
                    lastColumnIndex = ColumnIndex
                    Exit For
                End If
            Next ColumnIndex
            
            ' Display the clicked column index
            targetColumn = lastColumnIndex
        End If
End Function


Public Sub AutofitColumns(ResizeListbox As Boolean)
    Dim lRowCt As Long
    Dim lColCt As Long
    Dim lLengths()
    Dim mvTable: mvTable = oListBox.List
    ReDim lLengths(UBound(mvTable, 2))
    With oListBox
        For lRowCt = LBound(mvTable, 1) To UBound(mvTable, 1)
            For lColCt = LBound(mvTable, 2) To UBound(mvTable, 2)
                lLengths(lColCt) = Application.Max(4, lLengths(lColCt), Len(mvTable(lRowCt, lColCt)))
            Next
        Next
    End With
    
    Dim lCt As Long
    Dim sWidths As String
    Dim dTotWidth As Double
    Dim lblHidden As MSForms.Label
    Set lblHidden = oForm.Controls.Add("Forms.Label.1")
    For lCt = LBound(lLengths) To UBound(lLengths)
        With lblHidden
            .Font.Size = oListBox.Font.Size
            .Font.Name = "consolas" 'oListBox.Font.Name
            .Font.Bold = oListBox.Font.Bold
            .WordWrap = False
            .AutoSize = True
            .Caption = String(lLengths(lCt), "a")
        End With
        dTotWidth = dTotWidth + lblHidden.Width
        If Len(sWidths) = 0 Then
            sWidths = CStr(Int(lblHidden.Width) + 1) + 6
        Else
            sWidths = sWidths & ";" & CStr(Int(lblHidden.Width) + 1) + 6
        End If
    Next
   
    'Now set the widths of the columns
    oListBox.columnWidths = sWidths
   
    If Not ResizeListbox Then GoTo TidyUp
    
    'Adjust the dimensions of the listbox itself. You may want to adjust the constants I hard coded here.
   
    'Listbox will always be at least 200 wide
'    oListBox.Width = Application.Min(Application.Max(200, dTotWidth + 12), oListBox.Width)
    oListBox.Width = TotalColumnsWidth  'Evaluate(Replace(Join(Split(oListBox.columnWidths, ";"), "+"), "pt", "")) + 10
    aUserform.Init(oForm).ResizeToFitControls marginRight:=10, marginBottom:=10
    'Listbox will always be at least 48 high.
'    oListBox.Height = Application.Min(Application.Max((oListBox.ListCount + 1) * 12, 48), oListBox.Height)
TidyUp:
    oForm.Controls.Remove lblHidden.Name
    On Error GoTo 0
End Sub

Function TotalColumnsWidth()
    If oListBox.columnWidths = "" Then
        MsgBox "Column widths not set"
        TotalColumnsWidth = oListBox.Width
    End If
    TotalColumnsWidth = Evaluate(Replace(Join(Split(oListBox.columnWidths, ";"), "+"), "pt", "")) + 10
End Function

Sub AddFilter()
    If oListBox.columnWidths = "" Then
        MsgBox "Column widths not set"
        Exit Sub
    End If
    Dim var: var = Split(Replace(oListBox.columnWidths, "pt", ""), ";")
    Dim txt As MSForms.Textbox
    Dim i As Long
    Set txt = oForm.Controls.Add("Forms.Textbox.1")
    txt.Name = "txtFilter"
    txt.Top = oListBox.Top - txt.Height - 2
    txt.Width = 150
    
    Set Emitter = New EventListenerEmitter
    Emitter.AddEventListenerAll oForm
    
    Dim cbx As MSForms.ComboBox
    Set cbx = oForm.Controls.Add("Forms.ComboBox.1")
    cbx.Name = "cbxFilter"
    cbx.Height = txt.Height
    cbx.Width = 50
    cbx.Left = oListBox.Left
    cbx.Top = txt.Top
    For i = -1 To oListBox.columnCount - 1
        cbx.AddItem i
    Next
    cbx.ListIndex = 0
    
    txt.Left = oListBox.Left + cbx.Width + 6
End Sub

Public Sub FilterByColumn(This As String, _
                            Optional ColumnIndexZeroBased As Long = -1, _
                            Optional CaseSensitive As Boolean = False)
    Dim i               As Long
    Dim N               As Long
    Dim sTemp           As String
    If ColumnIndexZeroBased > oListBox.columnCount - 1 Or ColumnIndexZeroBased < 0 Then
        ColumnIndexZeroBased = -1
    End If
    N = oListBox.ListCount
    If ColumnIndexZeroBased <> -1 Then
        For i = N - 1 To 0 Step -1
            If CaseSensitive = True Then
                sTemp = oListBox.List(i, ColumnIndexZeroBased)
            Else
                This = LCase(This)
                sTemp = LCase(oListBox.List(i, ColumnIndexZeroBased))
            End If
            If InStr(1, sTemp, This) = 0 Then
                oListBox.RemoveItem (i)
            End If
        Next i
    Else
        Dim columnCount As Long
        N = oListBox.ListCount
        For i = N - 1 To 0 Step -1
            For columnCount = 0 To oListBox.columnCount - 1
                If CaseSensitive = True Then
                    sTemp = oListBox.List(i, columnCount)
                Else
                    This = LCase(This)
                    sTemp = LCase(oListBox.List(i, columnCount))
                End If
                If InStr(1, sTemp, This) > 0 Then
                Else
                    If columnCount = oListBox.columnCount - 1 Then
                        oListBox.RemoveItem (i)
                    End If
                End If
            Next columnCount
        Next i
    End If
End Sub


Function LoadCSV(TargetFile As String, Clear As Boolean)
    If Clear Then oListBox.Clear
    Dim ArrayOfElements
    Dim s: s = TxtRead(TargetFile)
    Dim arr
    arr = Split(s, vbLf)
    Dim iCols, iRows
    iRows = UBound(arr) + 1
    iCols = UBound(Split(arr(0), ",")) + 1
    ReDim ArrayOfElements(1 To iRows, 1 To iCols)
    Dim X, Y
    For X = 1 To iRows
        For Y = 1 To iCols
            ArrayOfElements(X, Y) = Split(arr(X - 1), ",")(Y - 1)
        Next
    Next
    oListBox.columnCount = iCols
    oListBox.List = ArrayOfElements
End Function

Sub ToRange(cell As Range)
    cell.Resize(oListBox.ListCount, oListBox.columnCount) = oListBox.List
End Sub

Sub ClearSelection()
    On Error Resume Next
    Dim i As Long
    For i = 0 To oListBox.ListCount
        oListBox.Selected(i) = False
    Next i
End Sub


Public Sub AcceptFiles(Optional sExpansion As String = "*.xlsm;*.xlsb;*.xlsx", Optional iDeepSubPath As Integer = 999)
'eg on userform_activate:
'aListBox.Init(ListBox1).AcceptFiles sExpansion:="*.xlsm;*.xlsb;*.xlsx",iDeepSubPath:=999
    
    'you can use .[_GethWnd] with controls which support it
    Dim ctr As control: Set ctr = oListBox
    Dim lGethWnd As LongPtr: lGethWnd = ctr.[_GethWnd]

    #If VBA7 Then
        Dim hwnd As LongPtr, HDROP As LongPtr
    #Else
        Dim hwnd As Long, HDROP As Long
    #End If

    Const WM_DROPFILES = &H233
    Dim tMsg As Msg, sFileName As String * 1000
    Dim lFilesCount As Long, i As Long
    hwnd = aUserform.Init(oForm).hwnd
    Call DragAcceptFiles(lGethWnd, True)

    Dim sPathFile   As String

    Do While GetMessage(tMsg, 0, 0, 0) And IsWindow(hwnd)
        If tMsg.message = WM_DROPFILES Then
            HDROP = tMsg.wParam
            lFilesCount = DragQueryFile(HDROP, &HFFFFFFFF, 0, 0)
            If lFilesCount Then
                For i = 0 To lFilesCount - 1
                    sPathFile = VBA.Trim$(VBA.Left(sFileName, DragQueryFile(HDROP, i, sFileName, VBA.Len(sFileName))))
                    Call getFilesFromPath(sPathFile, sExpansion, iDeepSubPath)
                Next i
            End If
            Call DragFinish(HDROP)
        End If
        Call TranslateMessage(tMsg)
        Call DispatchMessage(tMsg)
    Loop
End Sub
Private Sub getFilesFromPath(ByVal sPathFile As String, ByVal sExpansion As String, ByVal iDeepSubPath As Integer)
    Dim sExp        As String
    sExp = sGetExtensionName(sPathFile)
    If sExp = vbNullString Then
        Dim oCol    As Collection
        Set oCol = GetFiles(sPathFile, iDeepSubPath)
        Dim i       As Integer
        Dim iCount  As Integer
        iCount = oCol.count
        Dim sFile   As String
        For i = 1 To iCount
            sFile = oCol.item(i).Path
            sExp = sGetExtensionName(sFile)
            Call filterFiles(sFile, sExpansion, sExp)
        Next i
    Else
        Call filterFiles(sPathFile, sExpansion, sExp)
    End If
End Sub
Private Sub filterFiles(ByVal sPathFile As String, ByVal sExpansion As String, ByVal sExp As String)
    sExp = "*." & sExp
    If sExpansion = vbNullString Or sExpansion = "*.*" Then
    ElseIf Not likeExp(sExpansion, sExp) Then
        Exit Sub
    End If
    oListBox.AddItem sPathFile
End Sub
Private Function likeExp(ByVal sExpansion As String, ByVal sExp As String) As Boolean
    Dim arr         As Variant
    arr = VBA.Split(sExpansion, ";")
    Dim i           As Long
    Dim iCount      As Long
    iCount = UBound(arr, 1)
    For i = 0 To iCount
        If sExp Like arr(i) Then
            likeExp = True
            Exit For
        End If
    Next i
End Function
Private Function sGetExtensionName(ByVal sPathFile As String) As String
    Dim FSO         As Object
    Set FSO = CreateObject("Scripting.FileSystemObject")
    sGetExtensionName = FSO.GetExtensionName(sPathFile)
    Set FSO = Nothing
End Function
Private Function GetFiles(ByVal Path As String, ByVal iDeepSubPath As Integer) As Collection
    Dim MainFolder  As Object
    Dim iFolder     As Object
    Dim iFile       As Object
    Dim FSO         As Object
    Dim MainColl    As New Collection
    Dim iColl       As Collection
    Dim i           As Long

    Set FSO = CreateObject("Scripting.FileSystemObject")
    Set MainFolder = FSO.GetFolder(Path)
    If MainFolder Is Nothing Then Exit Function

    For Each iFile In MainFolder.Files
        If VBA.InStr(1, iFile.Name, "~") = 0 Then
            MainColl.Add iFile, iFile.Path
        End If
    Next

    If iDeepSubPath > 0 Then
        For Each iFolder In MainFolder.SubFolders
            Set iColl = GetFiles(iFolder.Path, iDeepSubPath - 1)
            For i = 1 To iColl.count
                MainColl.Add iColl(i)
            Next
        Next
    End If
    Set GetFiles = MainColl
End Function

Public Sub HeightToEntries(ByVal NumberOfEntries As Long)
    Const SM_CYEDGE = 46&
    With oListBox
        NumberOfEntries = IIf(NumberOfEntries > .ListCount, .ListCount, NumberOfEntries)
        .Height = ((9.75 * NumberOfEntries) _
                + IIf(oListBox.Width < TotalColumnsWidth, 18, 0) _
                + IIf(.SpecialEffect = fmSpecialEffectFlat, 0, GetSystemMetrics(SM_CYEDGE)))
    End With
End Sub

Public Sub LoadVBProjects()
    oListBox.Clear
    oListBox.columnCount = 1
    Dim coll As New Collection
    Dim WB As Workbook
    For Each WB In Workbooks
        If Len(WB.Path) > 0 Then
            If WorkbookProjectProtected(WB) = False Then
                On Error Resume Next
                coll.Add WB.Name, WB.Name
                On Error GoTo 0
            End If
        End If
    Next
    Rem list addins
    Dim vbProj As VBProject
    Dim wbPath As String
    For Each vbProj In Application.VBE.VBProjects
        On Error GoTo ErrorHandler
        wbPath = vbProj.FileName
        If Right(wbPath, 4) = "xlam" Or Right(wbPath, 3) = "xla" Then
            Dim wbName As String
            wbName = Mid(wbPath, InStrRev(wbPath, "\") + 1)
            If WorkbookProjectProtected(Workbooks(wbName)) = False Then
                On Error Resume Next
                coll.Add wbName, wbName
                On Error GoTo 0
            End If
        End If
SKIP:
    Next vbProj

    Dim el As Variant
    For Each el In coll
    oListBox.AddItem el
    Next

    Exit Sub
ErrorHandler:
    If Err.Number = 76 Then GoTo SKIP
End Sub

Public Sub SelectItems(This As Variant, Optional ByIndex As Boolean)
    Dim i As Long
    Select Case TypeName(This)
    Case Is = "String", "Long", "Integer"
        For i = 0 To oListBox.ListCount - 1
            If oListBox.List(i) = CStr(This) Then
                oListBox.Selected(i) = True
                DoEvents
                If oListBox.multiSelect = fmMultiSelectSingle Then Exit Sub
            End If
        Next
    Case Else
        Dim el As Variant
        If ByIndex Then
            For Each el In This
                oListBox.Selected(el) = True
            Next
        Else
            For Each el In This
                For i = 0 To oListBox.ListCount - 1
                    If oListBox.List(i) = el Then
                        oListBox.Selected(i) = True
                        DoEvents
                    End If
                Next
            Next
        End If
    End Select
End Sub

Public Sub AddHeader(Optional arrHeaders)
    If oListBox.columnWidths = "" Then Exit Sub
    Dim i As Long
    
    If IsMissing(arrHeaders) Then
        ReDim arrHeaders(0 To oListBox.columnCount - 1)
        For i = 1 To oListBox.columnCount
            arrHeaders(i - 1) = i
        Next
    End If
    
    Dim Header As MSForms.Label
    For i = 1 To oListBox.columnCount
        Set Header = oForm.Controls.Add("Forms.Label.1")
        If i = 1 Then
            Header.Left = oListBox.Left
        Else
            Header.Left = oForm.Controls("lblHeader-" & i - 1).Left + oForm.Controls("lblHeader-" & i - 1).Width
        End If
        Header.Name = "lblHeader-" & i
        Header.SpecialEffect = fmSpecialEffectFlat
        Header.BackColor = RGB(200, 200, 200)
        Header.Width = Trim(Replace(Split(oListBox.columnWidths, ";")(i - 1), "pt", ""))
        Header.Height = 12
        Header.Font.Bold = True
        Header.Font.Name = "Segoe UI"
        Header.Top = oListBox.Top - Header.Height - 1
        Header.TextAlign = fmTextAlignCenter
        If ArrayDimensions(arrHeaders) = 1 Then
            Header.Caption = arrHeaders(i - 1)
        Else
            Header.Caption = arrHeaders(0, i)
        End If
    Next

    Set Emitter = New EventListenerEmitter
    Emitter.AddEventListenerAll oForm

'    oListBox.ZOrder (1)
'    Header.ZOrder (0)

End Sub
Sub removeHeaders()
    Dim ctl As MSForms.control
    For Each ctl In oForm.Controls
        If ctl.Name Like "lblHeader-*" Then oForm.Controls.Remove ctl.Name
    Next
End Sub
Public Function Contains(This As String, _
                Optional ColumnIndexZeroBased As Long = -1, _
                Optional CaseSensitive As Boolean = False) As Boolean
    Dim i      As Long
    Dim N      As Long
    Dim sTemp  As String
    If ColumnIndexZeroBased > oListBox.columnCount - 1 Or ColumnIndexZeroBased < 0 Then
        ColumnIndexZeroBased = -1
    End If
    N = oListBox.ListCount
    If ColumnIndexZeroBased <> -1 Then
        For i = N - 1 To 0 Step -1
            If CaseSensitive = True Then
                sTemp = oListBox.List(i, ColumnIndexZeroBased)
            Else
                This = LCase(This)
                sTemp = LCase(oListBox.List(i, ColumnIndexZeroBased))
            End If
            If InStr(1, sTemp, This) > 0 Then
                Contains = True
                Exit Function
            End If
        Next i
    Else
        Dim columnCount As Long
        N = oListBox.ListCount
        For i = N - 1 To 0 Step -1
            For columnCount = 0 To oListBox.columnCount - 1
                If CaseSensitive = True Then
                    sTemp = oListBox.List(i, columnCount)
                Else
                    This = LCase(This)
                    sTemp = LCase(oListBox.List(i, columnCount))
                End If
                If InStr(1, sTemp, This) > 0 Then
                    Contains = True
                    Exit Function
                End If
            Next columnCount
        Next i
    End If
End Function

Public Sub SortOnColumn(OnColumn As Long)

    Dim vntData As Variant
    Dim vntTempItem As Variant
    Dim lngOuterIndex As Long
    Dim lngInnerIndex As Long
    Dim lngSubItemIndex As Long
    vntData = oListBox.List

    For lngOuterIndex = LBound(vntData, 1) To UBound(vntData, 1) - 1
        For lngInnerIndex = lngOuterIndex + 1 To UBound(vntData, 1)
            ' Use StrComp with vbTextCompare option to compare strings case-insensitively
            If StrComp(vntData(lngOuterIndex, OnColumn), vntData(lngInnerIndex, OnColumn), vbTextCompare) > 0 Then
                For lngSubItemIndex = 0 To oListBox.columnCount - 1
                    vntTempItem = vntData(lngOuterIndex, lngSubItemIndex)
                    vntData(lngOuterIndex, lngSubItemIndex) = vntData(lngInnerIndex, lngSubItemIndex)
                    vntData(lngInnerIndex, lngSubItemIndex) = vntTempItem
                Next lngSubItemIndex
            End If
        Next lngInnerIndex
    Next lngOuterIndex

    oListBox.Clear
    oListBox.List = vntData
End Sub

'Public Sub SortOnColumn(OnColumn As Long)
'
'    Dim vntData As Variant
'    Dim vntTempItem As Variant
'    Dim lngOuterIndex As Long
'    Dim lngInnerIndex As Long
'    Dim lngSubItemIndex As Long
'    vntData = oListBox.List
'    For lngOuterIndex = LBound(vntData, 1) To UBound(vntData, 1) - 1
'        For lngInnerIndex = lngOuterIndex + 1 To UBound(vntData, 1)
'            If vntData(lngOuterIndex, OnColumn) > vntData(lngInnerIndex, OnColumn) Then
'                For lngSubItemIndex = 0 To oListBox.columnCount - 1
'                    vntTempItem = vntData(lngOuterIndex, lngSubItemIndex)
'                    vntData(lngOuterIndex, lngSubItemIndex) = vntData(lngInnerIndex, lngSubItemIndex)
'                    vntData(lngInnerIndex, lngSubItemIndex) = vntTempItem
'                Next
'            End If
'        Next lngInnerIndex
'    Next lngOuterIndex
'    oListBox.Clear
'    oListBox.List = vntData
'End Sub

Public Function selectedIndexes() As Collection
    Dim i As Long
    Dim coll As New Collection
    If oListBox.ListCount > 0 Then
        For i = 0 To oListBox.ListCount - 1
            If oListBox.Selected(i) Then coll.Add i
        Next i
    End If
    Set selectedIndexes = coll
End Function

Public Function SelectedValues() As Collection 'single column
    Dim i As Long
    Dim ListItem As Long
    Dim selectedCollection As Collection
    Set selectedCollection = New Collection
    Dim listboxCount As Long

        If oListBox.ListCount > 0 Then
            For i = 0 To oListBox.ListCount - 1
                If oListBox.Selected(i) Then
                    selectedCollection.Add oListBox.List(i, oListBox.BoundColumn - 1)
                End If
            Next i
        End If

    Set SelectedValues = selectedCollection
End Function


Public Function SelectedRowsArray()
    Dim X As Long, Y As Long
    Dim ListItem As Long
    
    Dim indexColl As New Collection
    Set indexColl = selectedIndexes
    Dim out() As Variant
    ReDim out(1 To indexColl.count, 1 To oListBox.columnCount)
    For X = 1 To indexColl.count
        For Y = 1 To oListBox.columnCount
            out(X, Y) = oListBox.List(indexColl(X), Y - 1)
        Next
    Next
    SelectedRowsArray = out
End Function

Public Function SelectedRowsText() As String
    Dim X As Long, Y As Long
    Dim ListItem As Long
    Dim out As String
    Dim indexColl As New Collection
    Set indexColl = selectedIndexes
    For X = 1 To indexColl.count
        For Y = 0 To oListBox.columnCount - 1
            out = out & IIf(Y > 0, "|", "") & oListBox.List(indexColl(X), Y)
        Next
        If X < indexColl.count Then out = out & vbNewLine
    Next
    SelectedRowsText = out
End Function


Public Function SelectedCount() As Long
    Dim i As Long
    Dim ListItem As Long
    Dim selectedCollection As Collection
    Set selectedCollection = New Collection
    Dim listboxCount As Long
    Dim counter As Long

        If oListBox.ListCount > 0 Then
            For i = 0 To oListBox.ListCount - 1
                If oListBox.Selected(i) = True Then
                    counter = counter + 1
                End If
            Next i
        End If
    SelectedCount = counter
End Function

Public Sub DeselectAll()
    If oListBox.ListCount <> 0 Then
        Dim i As Long
        For i = 0 To oListBox.ListCount - 1
            oListBox.Selected(i) = False
        Next i
    End If
End Sub

Public Sub SelectAll()
    If oListBox.ListCount <> 0 Then
        Dim i As Long
        For i = 0 To oListBox.ListCount - 1
            oListBox.Selected(i) = True
        Next i
    End If
End Sub

Public Sub SelectLike(This As String)
    DeselectAll
    If This = "" Then Exit Sub
    Dim i As Long
    For i = 0 To oListBox.ListCount - 1
        If UCase(oListBox.List(i, 1)) Like "*" & UCase(This) & "*" Then
            oListBox.Selected(i) = True
        End If
    Next i
End Sub

Public Sub SortAZ()
    Dim j As Long
    Dim i As Long
    Dim Temp As Variant
    With oListBox
        For j = 0 To .ListCount - 2
            For i = 0 To .ListCount - 2
                If LCase(.List(i)) > LCase(.List(i + 1)) Then
                    Temp = .List(i)
                    .List(i) = .List(i + 1)
                    .List(i + 1) = Temp
                End If
            Next i
        Next j
    End With
End Sub

Public Sub SortZA()
    Dim j As Long
    Dim i As Long
    Dim Temp As Variant
    With oListBox
        For j = 0 To .ListCount - 2
            For i = 0 To .ListCount - 2
                If LCase(.List(i)) < LCase(.List(i + 1)) Then
                    Temp = .List(i)
                    .List(i) = .List(i + 1)
                    .List(i + 1) = Temp
                End If
            Next i
        Next j
    End With
End Sub

'Sub ToRangeSelect(cell As Range)
'    cell.RESIZE(lBox.ListCount, oListBox.ColumnCount) = CollectionsToArray2D(SelectedValues)
'End Sub

Public Sub SelectedToRange()
   Dim rng As Range
    If GetInputRange(rng, "Range picker", "Select range to output listbox' list") = False Then Exit Sub
    Dim var: var = aCollection.CollectionsToArray2D(SelectedValues)
    rng.Resize(UBound(var, 1), oListBox.columnCount) = var
End Sub

Public Sub RemoveSelected()
    Dim coll As New Collection: Set coll = selectedIndexes
    If coll.count = 0 Then Exit Sub
    Dim i As Long
    For i = coll.count To 1 Step -1
        oListBox.RemoveItem coll(i)
    Next
End Sub
